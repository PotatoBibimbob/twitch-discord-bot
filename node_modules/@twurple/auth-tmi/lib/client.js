"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = exports.DecoratedClient = void 0;
const auth_1 = require("@twurple/auth");
const tmi_js_1 = require("tmi.js");
/**
 * An extension of the tmi.js client which extends it with {@AuthProvider} integration.
 */
class DecoratedClient extends tmi_js_1.Client {
    /**
     * Creates a new tmi.js client which utilizes the given {@AuthProvider} instance.
     *
     * @param opts The tmi.js options, with the auth provider replacing the identity option.
     */
    constructor(opts) {
        const { authProvider, ...tmiOpts } = opts;
        super({
            ...tmiOpts,
            identity: {
                // need this because we can't get a user name dynamically, but need something to not default to justinfan
                username: 'dummy',
                password: async () => {
                    if (authProvider.tokenType === 'app') {
                        throw new auth_1.InvalidTokenTypeError(`You can not connect to chat using an AuthProvider that supplies app access tokens.
Please provide an auth provider that provides user access tokens, such as \`RefreshingAuthProvider\`.`);
                    }
                    const { accessToken } = await (0, auth_1.getValidTokenFromProvider)(authProvider, ['chat:read', 'chat:edit']);
                    return accessToken.accessToken;
                }
            }
        });
    }
}
exports.DecoratedClient = DecoratedClient;
exports.Client = DecoratedClient;
